{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","App.js","serviceWorker.js","index.js","initialText.md"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderEditor","bind","assertThisInitialized","containerLocation","renderButton","containerId","setState","fromWhere","updateFromWhere","style","_this2","react_default","a","createElement","onClick","className","_this$props","value","onTextChange","onChange","event","charswidth","name","id","Fragment","Component","Previewer","renderPreviewer","console","log","react_markdown_default","source","App","componentDidMount","fetch","initialMD","then","response","text","state","active","target","_this$state","components_Editor_Editor","f","components_Previewer_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9d8961b0.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\r\n\r\n// import \"./Editor.css\";\r\n// import Markdown from \"react-markdown\";\r\n// import initialMD from \"./initialText.md\";\r\n// class Editor extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.containerLocation = this.containerLocation.bind(this);\r\n//     this.renderButton = this.renderButton.bind(this);\r\n//     this.renderEditor = this.renderEditor.bind(this);\r\n//     this.renderPreviewer = this.renderPreviewer.bind(this);\r\n//     this.state = {\r\n//       active: false,\r\n//       fromWhere: \"\"\r\n//     };\r\n//   }\r\n//   componentDidMount = () => {\r\n//     fetch(initialMD)\r\n//       .then(response => response.text())\r\n//       .then(text => {\r\n//         this.setState({\r\n//           value: text\r\n//         });\r\n//       });\r\n//   };\r\n//   onTextChange(event) {\r\n//     this.setState({ value: event.target.value });\r\n//   }\r\n\r\n//   containerLocation(value) {\r\n//     this.setState({ fromWhere: value });\r\n//   }\r\n//   renderButton(action, style) {\r\n//     return (\r\n//       <i onClick={() => this.containerLocation(action)} className={style} />\r\n//     );\r\n//   }\r\n//   renderEditor() {\r\n//     const { value, fromWhere } = this.state;\r\n//     let style = \"w-100 h-100 editorContainer\";\r\n//     if (fromWhere === \"maxEditor\") {\r\n//       style = \"w-100 h-100 editorContainer maximized\";\r\n//     }\r\n\r\n//     return (\r\n//       <div className=\" mx-auto col-xs-8 col-sm-8 col-md-8\">\r\n//         <div className=\"form-group\">\r\n//           <div className=\"toolbar editorWrap mt-5 \">\r\n//             <i className=\" pl-1 pr-2 fab fa-free-code-camp\" />\r\n//             Editor\r\n//             {fromWhere == \"\"\r\n//               ? this.renderButton(\"maxEditor\", \"fas fa-arrows-alt\")\r\n//               : this.renderButton(\"\", \"fas fa-location-arrow resizer\")}\r\n//           </div>\r\n//           <textarea\r\n//             onChange={event => this.onTextChange(event)}\r\n//             className={style}\r\n//             charswidth=\"23\"\r\n//             name=\"text_body\"\r\n//             id=\"editor\"\r\n//             value={value}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n//   renderPreviewer() {\r\n//     const { value, fromWhere } = this.state;\r\n//     return (\r\n//       <div id=\"previewContainer\" className=\"col-xs-12 col-sm-12 col-md-12\">\r\n//         <div className=\"previewWrap preview\">\r\n//           <div className=\"toolbar w-100\">\r\n//             <i className=\"pl-1 pr-2 fab fa-free-code-camp\"> Previewer</i>\r\n//             {fromWhere == \"\"\r\n//               ? this.renderButton(\"maxPreviewer\", \"fas fa-arrows-alt\")\r\n//               : this.renderButton(\"\", \"fas fa-location-arrow resizer\")}\r\n//           </div>\r\n//           <div className=\"ml-1\" id=\"preview\">\r\n//             <Markdown source={value} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n//   render() {\r\n//     const { fromWhere } = this.state;\r\n//     if (fromWhere == \"maxEditor\") {\r\n//       return this.renderEditor();\r\n//     } else if (fromWhere == \"maxPreviewer\") {\r\n//       return this.renderPreviewer();\r\n//     } else {\r\n//       return (\r\n//         <React.Fragment>\r\n//           {this.renderEditor()}\r\n//           {this.renderPreviewer()}\r\n//         </React.Fragment>\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\n\r\n// export default Editor;\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"./Editor.css\";\r\nclass Editor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.renderEditor = this.renderEditor.bind(this);\r\n    this.containerLocation = this.containerLocation.bind(this);\r\n    this.renderButton = this.renderButton.bind(this);\r\n  }\r\n\r\n  containerLocation(containerId) {\r\n    this.setState({ fromWhere: containerId });\r\n    this.updateFromWhere(containerId);\r\n  }\r\n  updateFromWhere(fromWhere) {\r\n    this.props.updateFromWhere(fromWhere);\r\n  }\r\n  renderButton(containerId, style) {\r\n    return (\r\n      <i\r\n        onClick={() => this.containerLocation(containerId)}\r\n        className={style}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderEditor() {\r\n    const {\r\n      value,\r\n      fromWhere,\r\n      onTextChange\r\n    } = this.props;\r\n    let style = \"w-100 h-100 editorContainer\";\r\n    if (fromWhere === \"maxEditor\") {\r\n      style = \"w-100 h-100 editorContainer maximized\";\r\n    }\r\n\r\n    return (\r\n      <div className=\" mx-auto col-xs-8 col-sm-8 col-md-8\">\r\n        <div className=\"form-group\">\r\n          <div className=\"toolbar editorWrap mt-5 \">\r\n            <i className=\" pl-1 pr-2 fab fa-free-code-camp\" />\r\n            Editor\r\n            {fromWhere == \"\"\r\n              ? this.renderButton(\"maxEditor\", \"fas fa-arrows-alt\")\r\n              : this.renderButton(\"\", \"fas fa-location-arrow resizer\")}\r\n          </div>\r\n          <textarea\r\n            onChange={event => onTextChange(event)}\r\n            className={style}\r\n            charswidth=\"23\"\r\n            name=\"text_body\"\r\n            id=\"editor\"\r\n            value={value}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <React.Fragment>{this.renderEditor()}</React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Markdown from \"react-markdown\";\r\nimport \"./Previewer.css\";\r\nclass Previewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderPreviewer = this.renderPreviewer.bind(this);\r\n    this.containerLocation = this.containerLocation.bind(this);\r\n    this.renderButton = this.renderButton.bind(this);\r\n    \r\n  }\r\n\r\n  containerLocation(containerId) {\r\n    this.setState({ fromWhere: containerId });\r\n    this.updateFromWhere(containerId);\r\n  }\r\n  updateFromWhere(fromWhere) {\r\n    this.props.updateFromWhere(fromWhere);\r\n  }\r\n  renderButton(containerId, style) {\r\n    console.log(\"renderButtonPrev??\");\r\n    return (\r\n      <i\r\n        onClick={() => this.containerLocation(containerId)}\r\n        className={style}\r\n      />\r\n    );\r\n  }\r\n  renderPreviewer() {\r\n    const { value, fromWhere } = this.props;\r\n    console.log(\"fromWherePreviewer\", fromWhere);\r\n    return (\r\n      <div id=\"previewContainer\" className=\"col-xs-12 col-sm-12 col-md-12\">\r\n        <div className=\"previewWrap preview\">\r\n          <div className=\"toolbar w-100\">\r\n            <i className=\"pl-1 pr-2 fab fa-free-code-camp\"> Previewer</i>\r\n            {fromWhere == \"\"\r\n              ? this.renderButton(\"maxPreviewer\", \"fas fa-arrows-alt\")\r\n              : this.renderButton(\"\", \"fas fa-location-arrow resizer\")}\r\n          </div>\r\n          <div className=\"ml-1 mr-1\" id=\"preview\">\r\n            <Markdown source={value} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.renderPreviewer();\r\n  }\r\n}\r\n\r\nexport default Previewer;\r\n","\r\n\r\nimport React, { Component } from \"react\";\r\nimport Editor from \"./components/Editor/Editor\";\r\n\r\nimport initialMD from \"./initialText.md\";\r\nimport Previewer from \"./components/Previewer/Previewer\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onTextChange = this.onTextChange.bind(this);\r\n    this.state = {\r\n      value: \"\",\r\n      active: false,\r\n      fromWhere: \"\"\r\n    };\r\n  }\r\n  onTextChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n  componentDidMount = () => {\r\n    fetch(initialMD)\r\n      .then(response => response.text())\r\n      .then(text => {\r\n        this.setState({\r\n          value: text\r\n        });\r\n      });\r\n  };\r\n\r\n  updateFromWhere(fromWhere){\r\n    this.setState({ fromWhere:fromWhere });\r\n  }\r\n\r\n  render() {\r\n    const { value, fromWhere } = this.state;\r\n    if (fromWhere == \"maxEditor\") {\r\n      return (\r\n        <Editor\r\n          onTextChange={event => this.onTextChange(event)}\r\n          value={value}\r\n          fromWhere={fromWhere}\r\n          updateFromWhere={(f)=>this.updateFromWhere(f)}\r\n        />\r\n      );\r\n    } else if (fromWhere == \"maxPreviewer\") {\r\n      return <Previewer   updateFromWhere={(f)=>this.updateFromWhere(f)} value={value} fromWhere={fromWhere} />;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"container mb-5\">\r\n            <Editor\r\n              onTextChange={event => this.onTextChange(event)}\r\n              value={value}\r\n              fromWhere={fromWhere}\r\n              updateFromWhere={(f)=>this.updateFromWhere(f)}\r\n            />\r\n            <Previewer   updateFromWhere={(f)=>this.updateFromWhere(f)} value={value} fromWhere={fromWhere} />\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"normalize.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/initialText.6bc29337.md\";"],"sourceRoot":""}